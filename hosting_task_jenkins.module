<?php


/**
 * Implements hook_menu().
 */
function hosting_task_jenkins_menu() {
  $items['admin/hosting/jenkins'] = array(
    'title' => 'Jenkins',
    'description' => 'Configure the Jenkins tasks queue..',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_task_jenkins_settings_form'),
    'access arguments' => array('administer hosting jenkins'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'hosting_task_jenkins.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_perm().
 */
function hosting_task_jenkins_perm() {
  return array(
    'administer hosting jenkins',
  );
}

/**
 * Implements hook_node_insert().
 * @param $node
 */
function hosting_task_jenkins_node_insert($node) {
  hosting_task_jenkins_node_update($node);
}

/**
 * Implements hook_node_update()
 * @param $node
 */
function hosting_task_jenkins_node_update($node) {

  if ($node->type == 'task') {

    require_once( __DIR__ .'/vendor/autoload.php');

    if ($node->task_status == HOSTING_TASK_QUEUED) {
      $jenkins_url = variable_get('hosting_task_jenkins_url', 'http://localhost:8080/');
      $jenkins = new \JenkinsKhan\Jenkins($jenkins_url);

      try {
        $job = $jenkins->launchJob("hosting-task", array(
          'TASK_NID' => $node->nid,
        ));
        watchdog('jenkins', t('Hosting Task #@nid job sent to jenkins.', array(
          '@nid' => $node->nid,
        )));
      }
      catch (RuntimeException $e) {
        watchdog('jenkins', t('Hosting Task #@nid not sent to jenkins: @message', array(
          '@nid' => $node->nid,
          '@message' => $e->getMessage(),
        )));
      }
    }
  }
}